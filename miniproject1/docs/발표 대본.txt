안녕하세요 정혜림 입니다.
목차 이구여
DB 설계 과정과 프로젝트 구조를 어떻게 짰는지
그리고 시연과 소감으로 마무리하겠습니다.

먼저 DB 설계인데요 이와 같은 구조로 테이블을 만들었습니다.
게시물 테이블과 로그인 이력 테이블에서 어느 유저의 데이터인지 식별하기 위해 user_no 컬럼을 넣고 join 조건으로 사용했습니다

게시물 테이블에 user_no가 있으므로 작성자 컬럼은 넣지 않고 join해서 user_name 을 가져와서 작성자로 출력하는 방식으로 설계했습니다


db에서 실제 구현하기 위해서 쿼리문을 짤 때, 
회원번호, 게시물 번호, 이력번호를 pk로 사용했는데, 자동 증가를 위해서 각 테이블을 생성 후 시퀀스를 만들고 트리거로 자동 증가 동작을 하도록 쿼리를 작성했습니다.

유저 테이블에 최근 로그인과 최근로그아웃 칼럼이 있었는데요,
로그인/로그아웃 할때 각 컬럼을 업데이트 해주는 로직으로 코드를 짰습니다.
그리고 이 컬럼들이 업데이트 될때 자동으로 로그인 이력 테이블에 행이 추가되고, 데이터가 입력되도록 트리거를 만들어 주었습니다.

24시간 이내 등록된 게시물의 등록 날짜는 시:분으로 출력하는 것에 대해서도 트리거로 처리했습니다.

프로젝트 구조 입니다.
프로그램을 실행할 메인 클래스를 두고 Screen 클래스에서 화면출력 메소드들을 만들어 주었고, 
DAO 클래스에서 DB와 상호작용하도록 했습니다.
그리고 DB에서 가져온 데이터들을 저장할 VO 클래스를 만들어 객체로 사용했습니다.
이것들은 크게 board, user, login history 로 각 카테고리 별로 패키지를 나눴고, utility 패키지에 기타 함수들과 스크린 클래스들을 두어서 정리했습니다

예시로 보드 패키지를 캡쳐한 것인데요
DAO 안에 CRUD 동작을 위한 prepared statment 변수들과 메소드들이 있고 VO는 board 테이블의 데이터를 저장하기 위해 컬럼 명과 같은 변수들을 선언했습니다.

참고로 로그인관련한 친구들은 user 쪽에서 작업했습니다

시연해보도록 하겠습니다
주요 기능 위주로 동작 시켜볼 건데요
혹시 보고싶은 기능있으시면 말씀해주세요~

시연 마무리 하도록 하겠습니다.
소감 인데요
먼저 좋았던 점은 프로젝트를 진행하면서 가능한 저 혼자의 힘으로 모르는건 구글링을 해서 해결해보고 싶었습니다.
실제로 직접 타이핑 해보면서 예전에 적당히 이해하고 넘어갔던 부분들도 제대로 알게 되었습니다

아쉬운 점은 저는 프로젝트 할때 항상 마지막에 시간에 쫓기게 되는데 이번에도 단순 타이핑까지도 직접하다보니 결국 시간이 부족함을 느꼈습니다
다음 프로젝트에서는 시간 분배를 좀 더 잘 하고 너무 단순 노가다 타이핑은 지피티 선생의 도움을 받도록 하겠습니다

에러 관련해서도 구문 오류 같은건 보여주니까 찾기가 편했는데
논리적인 오류는 눈에 확 띄지가 않아 발생했을때 당황해버리는데요 
이번 프로젝트에서는 특히 인자가 잘 전달되지 않아서 발생한 오류들이 있었는데 교수님 말씀대로 sysout으로 찍어보니 문제점이 보여서 해결 할 수 있었습니다.